using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace QuickPluginConversion
{
    class Program
    {
        static void Main(string[] args)
        {
            string inputDirec = @"C:\Users\Alex\Desktop\Plugin Tests\alt\Halo 3 ODST\";
            string otputDirec = @"C:\Users\Alex\Desktop\Plugin Tests\Halo3ODST\";

            DirectoryInfo di = new DirectoryInfo(inputDirec);
            FileInfo[] fis = di.GetFiles("*.*");
            foreach (FileInfo fi in fis)
            {
                string[] lines = File.ReadAllLines(fi.FullName);

                for (int line = 0; line < lines.Length; line++)
                {
                    if (lines[line].Contains("headersize"))
                        lines[line] = lines[line].Replace("-DeToX-", "Assembly Auto-Generated Plugin (Originally Generated by DeToX)");

                    if (lines[line].Trim().ToLower().Contains("offset="))
                    {
                        string[] parts = lines[line].Split('"');
                        for (int part = 0; part < parts.Length; part++)
                        {
                            if (parts[part].ToLower().Contains("offset=") && !parts[part + 1].Contains("0x"))
                            {
                                parts[part + 1] = "0x" + int.Parse(parts[part + 1]).ToString("X");
                            }
                        }
                        lines[line] = string.Join("\"", parts);
                    }
                    if (lines[line].Trim().ToLower().Contains("size="))
                    {
                        string[] parts = lines[line].Split('"');
                        for (int part = 0; part < parts.Length; part++)
                        {
                            if (parts[part].ToLower().StartsWith(" size=") && !parts[part + 1].Contains("0x"))
                            {
                                parts[part + 1] = "0x" + int.Parse(parts[part + 1]).ToString("X");
                            }
                        }
                        lines[line] = string.Join("\"", parts);
                    }
                    if (lines[line].Trim().ToLower().Contains("headersize="))
                    {
                        string[] parts = lines[line].Split('"');
                        for (int part = 0; part < parts.Length; part++)
                        {
                            if (parts[part].ToLower().Contains("headersize=") && !parts[part + 1].Contains("0x"))
                            {
                                parts[part + 1] = "0x" + int.Parse(parts[part + 1]).ToString("X");
                            }
                        }
                        lines[line] = string.Join("\"", parts);
                    }
                    if (lines[line].Trim().ToLower().Contains("value="))
                    {
                        string[] parts = lines[line].Split('"');
                        for (int part = 0; part < parts.Length; part++)
                        {
                            if (parts[part].ToLower().Contains("value=") && !parts[part + 1].Contains("0x"))
                            {
                                parts[part + 1] = "0x" + int.Parse(parts[part + 1]).ToString("X");
                            }
                        }
                        lines[line] = string.Join("\"", parts);
                    }
                }

                List<string> newFile = new List<string>();
                foreach (string line in lines)
                {
                    if (!line.Trim().StartsWith("<id"))
                        newFile.Add(line);
                }

                File.WriteAllLines(otputDirec + fi.Name.Replace(fi.Extension, "") + ".asm", newFile.ToArray<string>());
            }
        }
    }
}
